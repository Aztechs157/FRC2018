// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc157.FRC2018.commands;

import org.usfirst.frc157.FRC2018.RobotMap;
import org.usfirst.frc157.FRC2018.commands.AuotoGroup.autonMode;

import com.ctre.phoenix.motorcontrol.NeutralMode;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
// import org.usfirst.frc157.FRC2018.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AuotoGroup extends CommandGroup
{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    private final static AnalogPotentiometer autoSelect = RobotMap.autoSelect;
    private boolean assigned = false;
    private String gameData;

    public static int getPotVal()
    {
        int potVal = (int) (Math.floor(autoSelect.get()));
        return potVal;
    }

    public enum autonMode
    {
        mode0, mode1, mode2, mode3, mode4, mode5, mode6, mode7, mode8, mode9, mode10, mode11
    }

    public final static autonMode autonArray[] = { autonMode.mode0, autonMode.mode1, autonMode.mode2, autonMode.mode3, autonMode.mode4, autonMode.mode5, autonMode.mode6, autonMode.mode7,
            autonMode.mode8, autonMode.mode9, autonMode.mode10, autonMode.mode11 };

    public static autonMode getAutoMode()
    {
        return autonArray[getPotVal()];
    }

    public AuotoGroup()
    {
        gameData = DriverStation.getInstance().getGameSpecificMessage().toUpperCase();
     
        System.out.println("gameData");
        autonMode autonRoutine = autonArray[getPotVal()];
        System.out.println(autonRoutine);
        switch (autonRoutine)
        {
            case mode0: // do nothing
                addSequential(new AutonMode0());
                break;
            case mode1: // cross the auto line
                //addSequential(new AutonMode1());
                addSequential(new AutonMode0());
                break;
            case mode2: // lining up middle, going for switch
                if (gameData.charAt(0) == 'L')
                    addSequential(new CenterSwitchAuton(true));
                else
                   addSequential(new CenterSwitchAuton(false));
                break;
            case mode3: // lining up left side, going for switch
                if (gameData.charAt(0) == 'L')
                    addSequential(new SameSideSwitch(true));
                else
                    //addSequential(new  OppositeSideSwitch(true));
                    addSequential(new CrossLineWithSensors());
                break;
            case mode4: // lining up left side, going for scale
                if (gameData.charAt(1) == 'L')
                    addSequential(new SameSideScale(true));
                else {
                   //addSequential(new OppositeSideScale(true));
                   if (gameData.charAt(0)=='L') {
                       addSequential(new SameSideSwitch(true));
                   }
                   else {
                       //addSequential(new CrossLineWithSensors());
                       addSequential(new CrossLineWithSensors());
                   }
                }
                break;
            case mode5: // lining up right side, going for switch
                if (gameData.charAt(0) == 'R')
                    addSequential(new SameSideSwitch(false));
                else
                    //addSequential(new OppositeSideSwitch(false));
                    addSequential(new CrossLineWithSensors());
                break;
            case mode6: // lining up right side, going for scale
                if (gameData.charAt(1) == 'R')
                    addSequential(new SameSideScale(false));
                else {
                    //addSequential(new OppositeSideScale(true));
                    if (gameData.charAt(0)=='R') {
                        addSequential(new SameSideSwitch(false));
                    }
                    else {
                        //addSequential(new CrossLineWithSensors());
                        addSequential(new CrossLineWithSensors());
                    }
                 }
                break;
            case mode7:
                addSequential(new CrossLineWithSensors());
                break;
            case mode8:
            	  if (gameData.charAt(0) == 'L')
                      addSequential(new ArcingCenterSwitch(true));
                  else
                     addSequential(new ArcingCenterSwitch(false));
                  break;
            case mode9: // lining up left side, going for scale for 2 cubes
                if (gameData.charAt(1) == 'L')
                    addSequential(new SameSideScale2Cube(true));
                else
                    addSequential(new OppositeSideScale(true));
                break;
            case mode10: // lining up right side, going for scale for 2 cubes
                if (gameData.charAt(1) == 'R')
                    addSequential(new SameSideScale2Cube(false));
                else
                    addSequential(new OppositeSideScale(false));
                break;
            case mode11: // auton for testing purposes only
                if (gameData.charAt(1) == 'R')
                    addSequential(new SameSideScale(false));
                else {
                    //addSequential(new OppositeSideScale(true));
                    if (gameData.charAt(0)=='L') {
                        addSequential(new OppositeSideSwitch(false));
                    }
                    else {
                        addSequential(new CrossLineWithSensors());
                    }
                 }
                break;
            default:
                addSequential(new AutonMode0());
                break;
        }
        addSequential(new empty());
        RobotMap.driveRight1.setNeutralMode(NeutralMode.Brake);
        RobotMap.driveRight2.setNeutralMode(NeutralMode.Brake);
        RobotMap.driveLeft1.setNeutralMode(NeutralMode.Brake);
        RobotMap.driveLeft2.setNeutralMode(NeutralMode.Brake);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        // addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        // addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // addSequential(new AutonMode2());
    }

    public void Periodic()
    {

    }
}

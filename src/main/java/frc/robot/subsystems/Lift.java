// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.PID;
import frc.robot.PIDParameters;
import frc.robot.PID_Wescott;

//import java.text.DecimalFormat;

//import frc.robot.Robot;
import frc.robot.RobotMap;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import java.util.ArrayList;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Lift extends Subsystem
{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DigitalInput extensionTopLimit = RobotMap.stageTopLimit;
    private final DigitalInput extensionBottomLimit = RobotMap.stageBottomLimit;
    private final WPI_TalonSRX extensionMotor = RobotMap.stageTalon;
    private final DigitalInput platformTopLimit = RobotMap.platformTopLimit;
    private final DigitalInput platformBottomLimit = RobotMap.platformBottomLimit;

    private final WPI_TalonSRX platformMotor = RobotMap.platformTalon;
    private final Encoder platformQuad = RobotMap.platformQuad;
    private final Encoder extensionQuad = RobotMap.stageQuad;
    private final double scale = 1;
    public static final double STAGETOP = 35;
    public static final double PLATTOP = 38.5;
    public PID_Wescott stagePID = new PID_Wescott (new PIDParameters[] { 
        new PIDParameters(0.5, 0, 0, 0, 0, 0, 0),
        new PIDParameters(0.5, 0, 0, 0, 0, 0, 0),
    });
    public final static int stagePIDUp = 0;
    public final static int stagePIDDown = 1;
    public PID_Wescott platPID = new PID_Wescott (new PIDParameters[] {
        new PIDParameters(1, 0, 0, 0, 0, 0, 0),
        new PIDParameters(0.9, 0.04, 0.03, 0.5, 0.0, 40.0, 0, -0.0, 5.0), // 0.9, 0, 0.03, 0.5, 0, 40,0),
        new PIDParameters(0.9, 0.04, 0.045, 0, 0, 40, 0, -0.0, 5.0), //0.9, 0, 0.045, 0, 0, 40, 0),
        new PIDParameters(0.5, 0, 0, 0, 0, 0, 0),
    });
    public final static int platPIDTop = 0;
    public final static int platPIDUp = 1;
    public final static int platPIDDown = 2;
    public final static int platPIDBottom = 3;
    public static double platLast = 0;
    public static double stageLast = 0;
    public static enum direction
    {
        UP, DOWN,
    }

    public static enum quad
    {
        PLATFORM, STAGE
    }
    public boolean StageTopLimit()
    {
        return extensionTopLimit.get();
    }
    public void hold()
    {
        platLast = getPlatEncoder();
        stageLast = getStageEncoder();

    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    @Override
    public void initDefaultCommand()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        platformMotor.set(ControlMode.PercentOutput, 0.0);

        extensionMotor.set(ControlMode.PercentOutput, 0.0);
        setDefaultCommand(new StopLift());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void movePlat(double speed)
    {
        platLast = Double.NaN;
        if (speed > 0)
        {
            if (!platformTopLimit.get())
            {
                platformMotor.set(scale * speed);
            }
            else
            {
                stopPlat();
            }
        }
        else
        {
            if (!false)
            {
                platformMotor.set(scale * speed);
            }
            else
            {
                stopPlat();
            }
        }
    }
    public void movePlatNoReset(double speed)
    {
        //platLast = Double.NaN;
        if (speed > 0)
        {
            if (!platformTopLimit.get())
            {
                platformMotor.set(speed);
            }
            else
            {
                //System.out.println("movePlatNoReset stopped me");
                platformMotor.set(0);
            }
        }
        else
        {
            if (!false)
            {
                platformMotor.set(speed);
            }
            else
            {
                platformMotor.set(0);;
            }
        }
    }
    public void moveStageNoReset(double speed)
    {
        if (speed < 0)
        {
            if (!StageTopLimit())
            {
                extensionMotor.set(speed);
            }
            else
            {
                extensionMotor.set(0);
            }
        }
        else
        {
            if (!extensionBottomLimit.get())
            {
                extensionMotor.set(speed);
            }
            else
            {
                extensionMotor.set(0);
            }
        }
    }
    
    public void setStage(double speed)
    {
        extensionMotor.set(speed);
    }
    
    public void setPlat(double speed)
    {
        platformMotor.set(speed);
    }
    
    public void moveStage(double speed)
    {
        stageLast = Double.NaN;
        if (speed < 0)
        {
            if (!StageTopLimit())
            {
                extensionMotor.set(speed);
            }
            else
            {
                stopStage();
            }
        }
        else
        {
            //System.out.println(!extensionBottomLimit.get());
            if (!extensionBottomLimit.get())
            {
                extensionMotor.set(speed);
            }
            else
            {
                stopStage();
            }
        }
    }
    public void stopPlat()
    {
        platLast = (Double.isNaN(platLast))?getPlatEncoder():platLast;
        movePlatNoReset(scale*platPID.pidCalculate(platLast, getPlatEncoder(), platPIDUp));
    }
    public void stopStage()
    {
        stageLast = (Double.isNaN(stageLast))?getStageEncoder():stageLast;
        moveStageNoReset(-scale*stagePID.pidCalculate(stageLast, getStageEncoder(), platPIDUp)); //TODO investigate platPIDUp here
    }
    public void move(direction dir, double speed)
    {
       switch (dir)
       {
           case UP:
               if (getPlatEncoder() >= PLATTOP - 0.25)
               {

                   platLast = (Double.isNaN(platLast))?getPlatEncoder():platLast;
                   moveStage(-scale*stagePID.pidCalculate(STAGETOP, getStageEncoder(), platPIDUp));
                   stageLast = Double.NaN;
                   movePlat(scale*platPID.pidCalculate(PLATTOP, getPlatEncoder(), platPIDTop));
                   //System.out.println(-scale*stagePID.pidCalculate(STAGETOP, getStageEncoder()));
               }
               else
               {
                   stageLast = (Double.isNaN(stageLast))?getStageEncoder():stageLast;
                   movePlat(scale*platPID.pidCalculate(PLATTOP, getPlatEncoder(), platPIDUp));
                   platLast = Double.NaN;
                   moveStage(-scale*platPID.pidCalculate(stageLast, getStageEncoder()));
                   //System.out.println(stageLast);
               }
               break;
           case DOWN:
               if (getStageEncoder() > 0.25)
               {
                   platLast = (Double.isNaN(platLast))?getPlatEncoder():platLast;
                   moveStage(-scale*stagePID.pidCalculate(0, getStageEncoder(), stagePIDDown));
                   stageLast = Double.NaN;
                   movePlat(scale*platPID.pidCalculate(platLast, getPlatEncoder(), platPIDUp));
               }
               else
               {
                   stageLast = (Double.isNaN(stageLast))?getStageEncoder():stageLast;
                   movePlat(scale*platPID.pidCalculate(0, getPlatEncoder(), platPIDDown));
                   platLast = Double.NaN;
                   moveStage(-scale*stagePID.pidCalculate(0, getStageEncoder(), platPIDUp));
               }
               break;
        }
    }
    public void stop()
    {
        stageLast = (Double.isNaN(stageLast))?getStageEncoder():stageLast;
        platLast = (Double.isNaN(platLast))?getPlatEncoder():platLast;
        moveStageNoReset(-scale*stagePID.pidCalculate(stageLast, getStageEncoder(), platPIDUp));
        movePlatNoReset(scale*platPID.pidCalculate(platLast, getPlatEncoder(), platPIDUp));
    }
    public double getEncoder(quad encoder)
    {
        double retVal = 0;
        switch (encoder)
        {
            case PLATFORM:
                retVal = getPlatEncoder();
                break;
            case STAGE:
                retVal = getStageEncoder();
                break;
        }
        return retVal;
    }
    public double getPlatEncoder()
    {
        return platformQuad.getDistance();
    }

    public double getStageEncoder()
    {
        return extensionQuad.getDistance();
    }
    /**
     * @return the extensionTopLimit
     */
    public boolean getExtensionTopLimit()
    {
        return StageTopLimit();
    }
    /**
     * @return the extensionBottomLimit
     */
    public boolean getExtensionBottomLimit()
    {
        return extensionBottomLimit.get();
    }
    /**
     * @return the platformTopLimit
     */
    public boolean getPlatformTopLimit()
    {
        return platformTopLimit.get();
    }
    /**
     * @return the platformBottomLimit
     */
    public boolean getPlatformBottomLimit()
    {
        return false;
    }
    public String debugPrint()
    {
        return "Platform Encoder: "+getPlatEncoder() + "\nStage Encoder: "+getStageEncoder();
    }
    public void resetPlatEncoder()
    {
        platformQuad.reset();
    }
    public void resetStageEncoder()
    {
        extensionQuad.reset();
    }
    @Override
    public void periodic()
    {
        // Put code here to be run every loop
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import frc.robot.Robot;

import edu.wpi.first.wpilibj.command.Command;
//import frc.robot.Robot;

/**
 *
 */
public class CalibrateLift extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    enum State
    {
        MoveUp,
        MoveDown,
        Finished
    }
    private State platState;
    private State stageState;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CalibrateLift() {
        requires(Robot.lift);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        platState = State.MoveUp;
        stageState = State.MoveUp;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        switch (platState)
        {
            case MoveUp:
                if (Robot.lift.getPlatformBottomLimit())
                {
                    Robot.lift.movePlat(0.5);
                }
                else
                {
                    platState = State.MoveDown;
                }
                break;
            case MoveDown:
                if (!Robot.lift.getPlatformBottomLimit())
                {
                    Robot.lift.movePlat(-0.1);
                }
                else
                {
                    Robot.lift.stopPlat();
                    Robot.lift.resetPlatEncoder();
                    platState = State.Finished;
                }
            default:
                break;
        }
        switch (stageState)
        {
            case MoveUp:
                if (Robot.lift.getExtensionBottomLimit())
                {
                    Robot.lift.moveStage(-0.5);
                }
                else
                {
                    stageState = State.MoveDown;
                }
                break;
            case MoveDown:
                if (!Robot.lift.getExtensionBottomLimit())
                {
                    Robot.lift.moveStage(0.1);
                }
                else
                {
                    Robot.lift.stopStage();
                    Robot.lift.resetStageEncoder();
                    stageState = State.Finished;
                }
            default:
                break;
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return platState == State.Finished && stageState == State.Finished;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}

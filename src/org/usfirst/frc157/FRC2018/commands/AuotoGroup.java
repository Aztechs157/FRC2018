// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.FRC2018.commands;

import org.usfirst.frc157.FRC2018.RobotMap;

import com.ctre.phoenix.motorcontrol.NeutralMode;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.command.CommandGroup;
//import org.usfirst.frc157.FRC2018.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class AuotoGroup extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    private final static AnalogPotentiometer autoSelect = RobotMap.autoSelect;

    public static int getPotVal()
    {
        int potVal = (int) (Math.floor(autoSelect.get()));
        return potVal;
    }
    public AuotoGroup() {
         addSequential(new empty());
    	 RobotMap.driveRight1.setNeutralMode(NeutralMode.Brake);
         RobotMap.driveRight2.setNeutralMode(NeutralMode.Brake);
         RobotMap.driveLeft1.setNeutralMode(NeutralMode.Brake);
         RobotMap.driveLeft2.setNeutralMode(NeutralMode.Brake);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
	//addSequential(new AutonMode2());
    }
    public void Periodic()
    {
    }
}
